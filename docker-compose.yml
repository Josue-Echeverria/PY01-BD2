version: '3.8'

services:
  app:
    build: .
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: db_encuestas
      DB_USER: postgres
      DB_PASSWORD: password
      MONGO_HOST: mongo 
      MONGO_PORT: 27017  
      MONGO_USER: root 
      MONGO_DB: db_surveys
      MONGO_PASSWORD: password 
      SPARK_MASTER_URL: spark://spark-master:7077
      NEO4J_URI: bolt://neo4j:7687
      NEO_USER: neo4j
      NEO_PASS: test12345
    ports:
      - 5002:5000
      - 8501:8501
    networks:
      - web
    depends_on:
      - kafka
      - db
      - mongo
      - spark-master
    restart: on-failure
    volumes:
      - .:/opt/app
    command: poetry run python3 app.py
  
  neo4j:
    image: neo4j:latest
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/test12345
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/import
      - neo4j_plugins:/plugins
    networks:
      - web
      
  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_UI_ENABLED=true
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080 
      - SPARK_MASTER_HOST=spark-master 
      - SPARK_LOCAL_IP=spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    networks:
      - web

  spark-worker:
    image: bitnami/spark:latest
    container_name: spark-worker
    ports:
      - "8082:8080"
    depends_on:
      - spark-master
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_MODE=worker
      - SPARK_WORKER_MEMORY=8G 
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_UI_ENABLED=true
      - SPARK_DRIVER_MEMORY=4g 
      - SPARK_EXECUTOR_MEMORY=8g  
      - SPARK_SSL_ENABLED=no
      - SPARK_WORKER_WEBUI_PORT=8082  
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_LOCAL_IP=spark-worker
    networks:
      - web
      
  db:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: password
    ports:
      - 5432:5432
    networks:
      - web
    volumes:
      - ./database/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 7s
      retries: 5

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - 27017:27017
    networks:
      - web
    volumes:
      - ./mongo_data:/docker-entrypoint-initdb.d

  mongo-express:
    image: mongo-express
    restart: always
    networks:
      - web
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://root:password@mongo:27017/

  redis-master:
    image: redis:latest
    volumes:
      - "./.data:/data"
    ports:
      - "6379:6379"
    networks:
      - web
    environment:
      - REDIS_MASTER_HOST=redis-master

  redis-slave:
    image: redis:latest
    command: >
      sh -c "redis-server --slaveof redis-master 6379 &&
             redis-server --repl-diskless-load disabled &&
             redis-server --slave-read-only yes &&
             redis-server --slave-serve-stale-data yes"
    ports:
      - "6380:6379"
    links:
      - redis-master
    volumes:
      - "./.data:/data"
    networks:
      - web
    environment:
      - REDIS_MASTER_HOST=redis-master

  kafka:
    image: bitnami/kafka:latest
    networks:
      - web
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    healthcheck:
      test: ["CMD-SHELL", "echo 'test-message' | kafka-console-producer.sh --broker-list localhost:9092 --topic health-check-topic && kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic health-check-topic --from-beginning --max-messages 1 | grep 'test-message'"]
      interval: 15s
      timeout: 10s
      retries: 3

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:

networks:
  web:
