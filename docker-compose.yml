# Use root/example as user/password credentials
version: '3.1'

services:

  app:
    build: .
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: db_encuestas
      DB_USER: postgres
      DB_PASSWORD: password
      MONGO_HOST: mongo 
      MONGO_PORT: 27017  
      MONGO_USER: root 
      MONGO_DB:  db_surveys
      MONGO_PASSWORD: password 
    ports:
      - 5002:5000
    networks:
      - web
    depends_on:
      db:
        condition: service_healthy
        restart: true
    restart: on-failure

    volumes:
      - .:/opt/app
    command: poetry run python3 -m flask --app app.py --debug run --host=0.0.0.0

  db:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: password
    ports:
      - 5432:5432
    networks:
      - web
    volumes:
      - ./database/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 7s
      retries: 5
    
  
  # pgadmin:
  #   image: dpage/pgadmin4
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: TC01@gmail.com
  #     PGADMIN_DEFAULT_PASSWORD: password
  #   networks:
  #     - web
  #   ports:
  #     - 5051:80

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - 27017:27017
    networks:
      - web
    volumes:
      - ./mongo_data:/docker-entrypoint-initdb.d


  mongo-express:
    image: mongo-express
    restart: always
    networks:
      - web
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://root:password@mongo:27017/

# Instancias de redis
  redis-master:
    image: redis:latest
    volumes:
      - "./.data:/data"
    ports:
      - "6379:6379"
    networks:
      - web
    environment:
      - REDIS_MASTER_HOST=redis-master
 
  redis-slave:
    image: redis:latest
    command: sh -c "redis-server --slaveof redis-master 6379 && redis-server --repl-diskless-load disabled && redis-server --slave-read-only yes && redis-server --slave-serve-stale-data yes"
    ports:
      - "6380:6379"
    links:
      - redis-master
    volumes:
      - "./.data:/data"
    networks:
      - web
    environment:
      - REDIS_MASTER_HOST=redis-master
     
  # # Instance 1
  redis-sentinel:
    build: 
      context: ./redis-sentinel
    ports:
      - "26379:26379"
    links:
      - redis-master
    networks:
      - web
    environment:
      - REDIS_MASTER_HOST=redis-master
 
  # # # Instance 2
  redis-sentinel2:
    build: 
      context: ./redis-sentinel
    ports:
      - "26380:26379"
    links:
      - redis-master
    networks:
      - web
    environment:
      - REDIS_MASTER_HOST=redis-master
 
  # # # Instance 3
  redis-sentinel3:
    build: 
      context: ./redis-sentinel
    ports:
      - "26381:26379"
    links:
      - redis-master
    networks:
      - web
    environment:
      - REDIS_MASTER_HOST=redis-master

    
networks:
  web:
    driver: bridge

